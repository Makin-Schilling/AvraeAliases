tembed -title "**Extensive Training DT**" -thumb <image> -color <color>
{{pargs=argparse(&ARGS&)}}
<drac2>
# Written by Stellumine#5554

# Setting Primary Variables
args=&ARGS&
pargs, returnstr, me = argparse(args[3:]),  f'', character()
repeat = int(pargs.get("rr")[0]) if pargs.get("rr") else 1
if len(args) < 3: # Checks to make sure there is at least 3 arguments
    err("Not enough arguments - See `!help dt train`")

# Setting CCs and Modding Variables
me.create_cc_nx("Extensive Training", 0, 40, None, None)
if me.cc_exists("Training Progress"):
    me.set_cc("Extensive Training", me.get_cc("Training Progress"))
    me.delete_cc("Training Progress")
if me.get_cc("Extensive Training") == 40:
    me.set_cc("Extensive Training", 0)
oTraining = me.get_cc("Extensive Training")
trainingCount, coincount = 0, 0

# Setting Skills and Bonuses
possibleSkills = ['strength', 'dexterity', 'constitution', 'intelligence', 'wisdom', 'charisma']
skillUsed = ''
trainingBonus = 0
skillUsed=[skill_name for skill_name in possibleSkills if args[2].lower() in skill_name.lower()]
skillUsed[0] if len(skillUsed) > 0 else err("Invalid Skill - See `!help dt train`")

if skillUsed[0] == 'strength':
    trainingBonus = me.skills.strength.value
elif skillUsed[0] == 'dexterity':  
    trainingBonus = me.skills.dexterity.value
elif skillUsed[0] == 'constitution':  
    trainingBonus = me.skills.constitution.value
elif skillUsed[0] == 'intelligence':  
    trainingBonus = me.skills.intelligence.value
elif skillUsed[0] == 'wisdom':  
    trainingBonus = me.skills.wisdom.value
else:
    trainingBonus = me.skills.charisma.value

b = "+"+pargs.join('b', '+') if pargs.get("b") else ""

# Setting Rolls
defroll, advroll, disroll, realroll = "1d20+","2d20kh1+", "2d20kl1+", ""
if pargs.get("adv") or pargs.get("mentor"):
    realroll = advroll
    if pargs.get("mentor") and pargs.get("dis"):
        realroll = defroll
elif pargs.get("dis"):
    realroll = disroll
else:
    realroll = defroll

# Final Roll String

trainingRollString = realroll+str(trainingBonus)+b

# Start Initial Output
returnstr += f' -f "**Character:** {name}\n**Date(s):** {args[0]}\n**Training:** {args[1]}\n**Checking:** {args[2]}\n'
returnstr += f'**Mentor:** {pargs.get("mentor")[0]} "' if pargs.get("mentor") else f'"'
# Start Loop
for i in range(repeat):
    coincount += 100
    if pargs.get("mentor"):
        coincount += 20

    returnstr += f' -f "Training Roll #{i+1}|'

    # Roll the Dice
    trainingRoll = vroll(trainingRollString)

    # Prepare Output
    returnstr += f'{trainingRoll.full}\n'
    if trainingRoll.total >= 15:
        if trainingRoll.result.crit == 1:
            returnstr += f'**CRIT PASSED**\n'
            me.mod_cc("Extensive Training", +2)
            trainingCount += 2
        else:
            returnstr += f'**PASSED**\n'
            me.mod_cc("Extensive Training", +1)
            trainingCount += 1
    else:
        if trainingRoll.result.crit == 2:
            returnstr += f'**CRIT FAILED**\n'
            me.mod_cc("Extensive Training", -1)
            trainingCount = trainingCount - 1 if oTraining+trainingCount >=0 else trainingCount
        else:
            returnstr += f'**FAILED**\n'

    #Stop rerolls if they complete training
    if oTraining+trainingCount >= 40:
        returnstr += f'{name} has finished training {args[1]}!\n"'
        break
    returnstr += f'"'

# adds all the coins and puts in the good ol coin pouch (Just Copy and Paste This)
# breaks down into gp sp and cp
platCoins = int(coincount/10)
coincount = int(coincount%10)
ngp = int(coincount)
nsp = (coincount - ngp)*10
ncp = int((nsp-int(nsp))*10)
nsp = int(nsp)
bagsLoaded=load_json(bags) #load the bags
# Error check for Coin Pouch
if "Coin Pouch" not in str(bagsLoaded):
  return f' -f "Error|You do NOT have a coin pouch. Go make one with `!coins` and come back to crime." -t 120'
pouch=([x for x in bagsLoaded if x[0]=="Coin Pouch"])[0] #load the coinpouch
opp = pouch[1]['pp'] # what pp before?
ogp = pouch[1]['gp'] # what gp was before?
if platCoins > opp:
    amountOver = platCoins - opp
    ngp += 10*amountOver
    platCoins = platCoins - amountOver
pouch[1].update({'pp':pouch[1]['pp']-platCoins, 'gp':pouch[1]['gp']-ngp, 'sp':pouch[1]['sp']-nsp, 'cp':pouch[1]['cp']-ncp}) #updates new quantities locally
pouch in bagsLoaded or bagsLoaded.append(pouch)
me.set_cvar("bags",dump_json(bagsLoaded))#dumps the coins back to the cvar

returnstr += f' -f "Extensive Training Progress|{me.cc_str("Extensive Training")}({"+" if trainingCount >0 else ""}{trainingCount})"'
returnstr += f' -f "Removed Coins|Total: {platCoins*10+ngp}\n`{ogp}` -> `{ogp-ngp}`gp\n`{opp}` -> `{opp-platCoins}`pp"'


return returnstr
</drac2>
-footer "!dt extrain < date / range > < item / feat > < ability used > [-b #] [adv] [dis] [-mentor \"name\"] [-rr #] | Written by Stellumine#5554"